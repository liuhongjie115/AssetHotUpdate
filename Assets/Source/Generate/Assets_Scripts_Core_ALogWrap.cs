//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Assets_Scripts_Core_ALogWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Assets.Scripts.Core.ALog), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("SetCurLogType", SetCurLogType);
		L.RegFunction("AddCurLogType", AddCurLogType);
		L.RegFunction("SetLuaStackInfoCB", SetLuaStackInfoCB);
		L.RegFunction("CanSendBugly", CanSendBugly);
		L.RegFunction("GetLogRootPath", GetLogRootPath);
		L.RegFunction("OnQuit", OnQuit);
		L.RegFunction("Info", Info);
		L.RegFunction("Warning", Warning);
		L.RegFunction("Error", Error);
		L.RegFunction("LuaInfo", LuaInfo);
		L.RegFunction("LuaWarning", LuaWarning);
		L.RegFunction("LuaError", LuaError);
		L.RegFunction("Other", Other);
		L.RegFunction("ReStart", ReStart);
		L.RegFunction("New", _CreateAssets_Scripts_Core_ALog);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("curLogType", get_curLogType, set_curLogType);
		L.RegVar("dispatchToGMPanelCB", get_dispatchToGMPanelCB, set_dispatchToGMPanelCB);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateAssets_Scripts_Core_ALog(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				Assets.Scripts.Core.ALog obj = new Assets.Scripts.Core.ALog();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Assets.Scripts.Core.ALog.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Core.ALog.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetCurLogType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Assets.Scripts.Core.ALog.SetCurLogType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddCurLogType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			Assets.Scripts.Core.ALog.AddCurLogType(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLuaStackInfoCB(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Func<string> arg0 = (System.Func<string>)ToLua.CheckDelegate<System.Func<string>>(L, 1);
			Assets.Scripts.Core.ALog.SetLuaStackInfoCB(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CanSendBugly(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Core.ALog.CanSendBugly();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLogRootPath(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = Assets.Scripts.Core.ALog.GetLogRootPath();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnQuit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Core.ALog.OnQuit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Info(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Assets.Scripts.Core.ALog.Info(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Assets.Scripts.Core.ALog.Info(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.Info");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Warning(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Assets.Scripts.Core.ALog.Warning(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Assets.Scripts.Core.ALog.Warning(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.Warning");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Error(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Assets.Scripts.Core.ALog.Error(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Assets.Scripts.Core.ALog.Error(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.Error");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Assets.Scripts.Core.ALog.LuaInfo(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Assets.Scripts.Core.ALog.LuaInfo(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.LuaInfo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaWarning(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Assets.Scripts.Core.ALog.LuaWarning(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Assets.Scripts.Core.ALog.LuaWarning(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.LuaWarning");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LuaError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				Assets.Scripts.Core.ALog.LuaError(arg0);
				return 0;
			}
			else if (count == 2)
			{
				string arg0 = ToLua.CheckString(L, 1);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 2);
				Assets.Scripts.Core.ALog.LuaError(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.LuaError");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Other(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				Assets.Scripts.Core.ALog.Other(arg0, arg1);
				return 0;
			}
			else if (count == 3)
			{
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
				string arg1 = ToLua.CheckString(L, 2);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 3);
				Assets.Scripts.Core.ALog.Other(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Assets.Scripts.Core.ALog.Other");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReStart(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			Assets.Scripts.Core.ALog.ReStart();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curLogType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, Assets.Scripts.Core.ALog.curLogType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dispatchToGMPanelCB(IntPtr L)
	{
		try
		{
			ToLua.Push(L, Assets.Scripts.Core.ALog.dispatchToGMPanelCB);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curLogType(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			Assets.Scripts.Core.ALog.curLogType = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dispatchToGMPanelCB(IntPtr L)
	{
		try
		{
			System.Action<string,bool,int> arg0 = (System.Action<string,bool,int>)ToLua.CheckDelegate<System.Action<string,bool,int>>(L, 2);
			Assets.Scripts.Core.ALog.dispatchToGMPanelCB = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

